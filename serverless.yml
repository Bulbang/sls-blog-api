service: blog-api

frameworkVersion: "2"

provider:
  name: aws
  runtime: nodejs12.x
  lambdaHashingVersion: 20201221

  stage: ${opt:stage, 'dev'}
  region: us-east-1

  environment:
    TABLE_NAME: ${self:custom.TableName}
    REGION: ${self:provider.region}
    BUCKET_NAME: ${self:custom.BucketName}

plugins:
  - serverless-webpack
  - serverless-iam-roles-per-function

functions:
  getArticles:
    handler: src/lambdas/getArticles/handler.getAllArticles
    events:
      - http:
          method: get
          path: /articles
          cors: true
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Scan
        Resource: !GetAtt DynamoDBTable.Arn

  getArticle:
    handler: src/lambdas/getArticle/handler.getArticle
    events:
      - http:
          method: get
          path: /articles/{id}
          cors: true
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:GetItem
        Resource: !GetAtt DynamoDBTable.Arn

  putArticle:
    handler: src/lambdas/putArticle/handler.putArticle
    events:
      - http:
          path: /articles/create
          method: post
          cors: true
          request:
            schemas:
              application/json: ${file(src/lambdas/putArticle/schema.json)}
          authorizer:
            type: token
            name: auth
            identitySource: method.request.header.Authorization
            resultTtlInSeconds: 0
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem
        Resource: !GetAtt DynamoDBTable.Arn

  updateArticle:
    handler: src/lambdas/updateArticle/handler.updateArticle
    events:
      - http:
          method: put
          path: /articles/{id}
          cors: true
          request:
            parameters:
              paths:
                id: true
            schemas:
              application/json: ${file(src/lambdas/updateArticle/schema.json)}
          authorizer:
            type: token
            name: auth
            identitySource: method.request.header.Authorization
            resultTtlInSeconds: 0
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:UpdateItem
        Resource: !GetAtt DynamoDBTable.Arn
  getPresignUrl:
    handler: src/lambdas/getPresignUrl/handler.getPresignUrl
    events:
      - http:
          path: /getPresignUrl
          method: get
          cors: true

    iamRoleStatements:
      - Effect: Allow
        Action:
          - s3:*
        Resource: !Join ["/", [!GetAtt ImageBucket.Arn, "*"]]

  auth:
    handler: src/lambdas/auth/handler.auth

custom:
  TableName: ${self:service}-${self:provider.stage}-table
  AdminsTableName: ${self:service}-${self:provider.stage}-admins-table
  BucketName: ${self:service}-${self:provider.stage}-image-bucket

  webpack:
    webpackConfig: webpack.config.js
    includeModules: true
    packager: yarn

resources:
  Resources:
    ImageBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.BucketName}
        AccessControl: PublicReadWrite
        PublicAccessBlockConfiguration:
          BlockPublicAcls: false
          BlockPublicPolicy: false
          IgnorePublicAcls: false
          RestrictPublicBuckets: false
        CorsConfiguration:
          CorsRules:
            - AllowedMethods:
                - GET
                - PUT
              AllowedOrigins:
                - "*"

    DynamoDBTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.TableName}
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
